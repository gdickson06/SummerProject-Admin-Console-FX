<?xml version="1.0" encoding="UTF-8"?>
<!-- importing necessary Java, JavaFX and JFoenix classes for FXML file -->
<?import com.jfoenix.controls.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.image.*?>
<?import javafx.scene.text.*?>
<?import java.lang.*?>
<?import javafx.scene.layout.*?>

<!-- The below AnchorPane will consist of all the subsequent JFXButtons, Labels, JFXComboBox and JFXListView that will appear on screen
The fx:controller is used to reference the SelectedLectureController.java controller class that will manipulate the FXML objects -->
<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="800.0" prefWidth="1375.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="application.SelectedLectureController">
   <children>
      <!-- Creating the DatePicker object for Start Date, with fx:id so that the controller class can call
      the getValue method to retrieve the start date for a lecture selected by the user -->
      <DatePicker fx:id="StartDate" layoutX="145.0" layoutY="420.0" prefHeight="39.0" prefWidth="157.0" />
      <!-- Creating the JFXTextArea for Description, with fx:id so that the controller class can 
      call the getText method to retrieve the description for the lecture entered by the user -->
      <JFXTextArea fx:id="DescriptionText" focusColor="WHITE" labelFloat="true" layoutX="1014.0" layoutY="360.0" prefHeight="153.0" prefWidth="209.0" promptText="Enter Description Here" unFocusColor="WHITE" />
      <!-- Creating the labels for Start Time, Location, Staff and Theme, to be positioned adjacent to
      their respective JFXTextFields -->
      <Label layoutX="347.0" layoutY="360.0" text="Start Time:" />
      <Label layoutX="360.0" layoutY="300.0" text="Location:" />
      <Label layoutX="390.0" layoutY="245.0" text="Staff:" />
      <Label layoutX="67.0" layoutY="485.0" text="Theme:" />
      <!-- Creating the JFXTextFields for Theme, Staff, Location and Start Time, each with fx:id 
      so that the controller class can call the getText method to retrieve the different values for the 
      lecture entered by the user -->
      <JFXTextField fx:id="ThemeText" focusColor="WHITE" layoutX="143.0" layoutY="480.0" prefHeight="35.0" prefWidth="183.0" promptText="Enter Theme Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <JFXTextField fx:id="StaffText" focusColor="WHITE" layoutX="460.0" layoutY="240.0" prefHeight="35.0" prefWidth="183.0" promptText="Enter Staff Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <JFXTextField fx:id="LocationText" focusColor="WHITE" layoutX="460.0" layoutY="295.0" prefHeight="35.0" prefWidth="183.0" promptText="Enter Location Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <JFXTextField fx:id="StartTimeText" focusColor="WHITE" layoutX="460.0" layoutY="355.0" prefHeight="35.0" prefWidth="183.0" promptText="Enter Start Time Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
       <!-- The below ImageView will act as a placeholder for the QUB logo to be populated in the initialise() method in the controller class -->
      <ImageView fx:id="Image" fitHeight="114.0" fitWidth="406.0" layoutX="45.0" layoutY="65.0" pickOnBounds="true" preserveRatio="true" />
      <!-- The below label is the Console header. It will be positioned at 400 on the X axis and 75 on the Y axis to 
   	  maintain a static feel throughout the console -->
      <Label layoutX="400.0" layoutY="75.0" text="Medical Hub Administration Console" />
       <!-- Creating the sub menu header for the page, with text explaining how to navigate the screen -->
      <Label layoutX="400.0" layoutY="125.0" prefHeight="27.0" prefWidth="990.0" text="Update the fields below and click 'Save Details', or click 'Delete Lecture' to remove from database" />
      <!-- Creating the JFXTextFields for Day and Week, each with fx:id so that the controller class
       can call the getText method to retrieve the different values for the lecture entered by the user -->
      <JFXTextField fx:id="DayText" focusColor="WHITE" layoutX="145.0" layoutY="295.0" prefHeight="35.0" prefWidth="157.0" promptText="Enter day Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <JFXTextField fx:id="WeekText" focusColor="WHITE" layoutX="145.0" layoutY="240.0" prefHeight="33.0" prefWidth="157.0" promptText="Enter Week Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <!-- Creating the labels for Week, Day, Cohorts and Start Date, each to be positioned adjacent
      to their respective JFXTextFields and DatePicker object -->
      <Label layoutX="77.0" layoutY="245.0" text="Week:" />
      <Label layoutX="90.0" layoutY="300.0" text="Day:" />
      <Label layoutX="59.0" layoutY="360.0" text="Cohorts:" />
      <Label layoutX="41.0" layoutY="425.0" text="Start Date:" />
      <!-- Creating the JFXButtons for the Save Details and Delete Lecture from Database, each with an
       onAction identifier that will reference the associated java methods within the
      controller class -->
      <JFXButton layoutX="44.0" layoutY="567.0" onAction="#SaveChanges" text="Save Details" />
      <JFXButton layoutX="248.0" layoutY="567.0" onAction="#Delete" text="Delete Lecture" />
      <!-- Creating the JFXButtons for the Return to Search, Return to Main Menu and Return to Lecture
      Menu, each with an onAction identifier that will reference each associated java method within the
      controller class -->
      <JFXButton layoutX="463.0" layoutY="567.0" onAction="#ReturnLectureScreen" text="Return to Lectures Screen" />
      <JFXButton layoutX="760.0" layoutY="567.0" onAction="#Home" text="Return to Main Menu" />
      <JFXButton layoutX="1014.0" layoutY="567.0" onAction="#Back" text="Return to Search" />
      <!-- Creating the JFXTextFields for Style, Teaching, Subject and End Time, each with fx:id 
      so that the controller class can call the getText method to retrieve the different values for the 
      lecture entered by the user -->
      <JFXTextField fx:id="StyleText" focusColor="WHITE" layoutX="785.0" layoutY="295.0" prefHeight="35.0" prefWidth="183.0" promptText="Enter Style Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <JFXTextField fx:id="TeachingText" focusColor="WHITE" layoutX="785.0" layoutY="240.0" prefHeight="35.0" prefWidth="183.0" promptText="Enter Teaching Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <JFXTextField fx:id="SubjectText" focusColor="WHITE" layoutX="460.0" layoutY="480.0" prefHeight="35.0" prefWidth="183.0" promptText="Enter Subject Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <JFXTextField fx:id="EndTimeText" focusColor="WHITE" layoutX="460.0" layoutY="420.0" prefHeight="35.0" prefWidth="183.0" promptText="Enter End Time Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <!-- Creating the labels for End Time, Subject, teaching, Style and Module, each to be positioned
      adjacent to their respective JFXTextFields -->
      <Label layoutX="354.0" layoutY="425.0" text="End Time:" />
      <Label layoutX="367.0" layoutY="485.0" text="Subject:" />
      <Label layoutX="684.0" layoutY="245.0" text="Teaching:" />
      <Label layoutX="713.0" layoutY="300.0" text="Style:" />
      <Label layoutX="692.0" layoutY="425.0" text="Module:" />
      <!-- Creating the JFXTextFields for Module and Cohorts, each with fx:id so that the controller 
      class can call the getText method to retrieve the different values for the lecture entered by
       the user -->
      <JFXTextField fx:id="ModuleText" focusColor="WHITE" layoutX="785.0" layoutY="420.0" prefHeight="35.0" prefWidth="157.0" promptText="Enter Module Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <JFXTextField fx:id="CohortsText" focusColor="WHITE" layoutX="145.0" layoutY="355.0" prefHeight="35.0" prefWidth="157.0" promptText="Enter Cohorts Here" unFocusColor="WHITE">
         <font>
            <Font size="16.0" />
         </font>
      </JFXTextField>
      <!-- Creating the label that will display the Lecture information below the sub header -->
      <Label fx:id="IDLabel" layoutX="500.0" layoutY="181.0" text="Label" />
      <!-- Creating the JFXComboBox for Year, with fx:id so that the controller class can call the
      getValue method to retrieve the year value for the lecture that was selected by the user -->
      <JFXComboBox fx:id="year" focusColor="WHITE" layoutX="785.0" layoutY="355.0" prefHeight="39.0" prefWidth="157.0" unFocusColor="WHITE" />
      <!--  Creating the JFXCheckBox for optional, with fx:id so that the controller class can call the
      getValue method to see if lecture was selected as optional or not by the user -->
      <JFXCheckBox fx:id="optional" checkedColor="#a10026" layoutX="785.0" layoutY="485.0" text="Optional" unCheckedColor="WHITE" />
      <!-- Creating the labels for Lecture ID and Year to be positioned adjacent to their respective
      JFXTextField and JFXComboBox -->
      <Label layoutX="400.0" layoutY="181.0" text="Lecture ID:" />
      <Label layoutX="717.0" layoutY="360.0" text="Year:" />
   </children>
</AnchorPane>
